{"version":3,"sources":["../../app-src/util/HttpService.js"],"names":["HttpService","get","url","Promise","resolve","reject","xhr","XMLHttpRequest","open","onreadystatechange","readyState","status","JSON","parse","responseText","send"],"mappings":";;;;;;AAAO,kBAAMA,WAAN,CAAkB;AACrBC,oBAAIC,GAAJ,EAAS;AACL,2BAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;;AAEpC;AACA,8BAAMC,MAAM,IAAIC,cAAJ,EAAZ;;AAEA;AACAD,4BAAIE,IAAJ,CAAS,KAAT,EAAgBN,GAAhB;;AAEAI,4BAAIG,kBAAJ,GAAyB,MAAM;;AAE3B;AACA,gCAAGH,IAAII,UAAJ,IAAkB,CAArB,EAAwB;;AAEpB;AACA,oCAAGJ,IAAIK,MAAJ,IAAc,GAAjB,EAAsB;AAClBP,4CAAQQ,KAAKC,KAAL,CAAWP,IAAIQ,YAAf,CAAR;AACH,iCAFD,MAEO;AACHT,2CAAOC,IAAIQ,YAAX;AACH;AACJ;AACJ,yBAZD;;AAcA;AACAR,4BAAIS,IAAJ;AACH,qBAxBM,CAAP;AAyBH;AA3BoB","file":"HttpService.js","sourcesContent":["export class HttpService {\n    get(url) {\n        return new Promise((resolve, reject) => {\n            \n            //Cria uma instância \n            const xhr = new XMLHttpRequest();\n\n            //Abre uma conexão com o servidor\n            xhr.open('GET', url);\n\n            xhr.onreadystatechange = () => {\n\n                //Indica que a requisição foi concluída com uma resposta pronta\n                if(xhr.readyState == 4) {\n\n                    //Indica que não deu erro\n                    if(xhr.status == 200) {\n                        resolve(JSON.parse(xhr.responseText));\n                    } else {\n                        reject(xhr.responseText);\n                    }\n                }\n            };\n\n            //Executa a requisição configurada\n            xhr.send();\n        });\n    }\n}"]}